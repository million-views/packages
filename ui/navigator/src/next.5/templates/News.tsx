// file: src/next/navigator/templates/News.tsx

import type { ElementType, ReactNode } from "react";

import { useNavigator } from "../Navigator";
import {
  Actions,
  Brand,
  Drawer,
  Header,
  Item,
  Search,
  Tabs,
} from "../components";
import { type TemplateProps } from "../types";
import "../navigator.css";
import "./styles/news.css";

/**
 * News Template specific UI element tree/structure
 */
export interface NewsUiTree {
  header?: {
    element?: ElementType;
    brand?: ElementType;
    search?: ElementType;
    actions?: ElementType;
  };
  tabs?: {
    primary?: ReactNode;
    secondary?: ReactNode;
  };
  navigation?: ReactNode;
  drawer?: ElementType;
}

export function News({ components }: TemplateProps<NewsUiTree>) {
  const {
    navigationTree,
    activeSection,
    secondarySection,
    isDrawerOpen,
    isMobile,
    closeDrawer,
    appTitle,
    logo,
    renderIcon,
  } = useNavigator();

  // Get navigation items - for drawer
  const primaryItems = navigationTree[activeSection] || [];
  const secondaryItems = secondarySection
    ? navigationTree[secondarySection] || []
    : [];

  // Get components (custom or default)
  const HeaderComponent = components?.header?.element || Header;
  const BrandComponent = components?.header?.brand || Brand;
  const DrawerComponent = components?.drawer || Drawer;
  const TabsComponent = Tabs;

  // Google Logo component
  const GoogleLogo = () => (
    <div className="news-google-logo">
      <span className="news-logo-g">G</span>
      <span className="news-logo-o1">o</span>
      <span className="news-logo-o2">o</span>
      <span className="news-logo-g2">g</span>
      <span className="news-logo-l">l</span>
      <span className="news-logo-e">e</span>
    </div>
  );

  // Create the search component
  const searchComponent = components?.header?.search || (
    <Search
      placeholder="Search for topics, locations & sources"
      expandable={true}
    />
  );

  // Create the actions component
  const actionsComponent = components?.header?.actions || (
    <Actions>
      <button className="mv-nav-action-button">
        {renderIcon("Search", 24)}
      </button>
      <button className="mv-nav-action-button">
        {renderIcon("HelpCircle", 24)}
      </button>
      <button className="mv-nav-action-button">
        {renderIcon("Settings", 24)}
      </button>
      <button className="news-signin-button">
        Sign in
      </button>
    </Actions>
  );

  // Tabs customization - fixed to prevent "false" type errors
  const PrimaryTabsComponent = components?.tabs?.primary ||
    (!isMobile
      ? (
        <TabsComponent
          section={activeSection}
          variant="primary"
          items={primaryItems}
        />
      )
      : null);

  const SecondaryTabsComponent = components?.tabs?.secondary ||
    (secondarySection
      ? (
        <TabsComponent
          section={secondarySection}
          variant="secondary"
          items={secondaryItems}
        />
      )
      : null);

  // Navigation component (combined tabs)
  const NavigationComponent = components?.navigation || (
    <div className="mv-news-tabs-container">
      {PrimaryTabsComponent}
      {SecondaryTabsComponent}
    </div>
  );

  return (
    <div className="mv-news-container">
      <HeaderComponent>
        <BrandComponent
          title={appTitle || "News"}
          logo={logo || <GoogleLogo />}
        />
        {searchComponent}
        {actionsComponent}
      </HeaderComponent>

      {/* Navigation tabs */}
      {NavigationComponent}

      <div className="mv-news-layout">
        {/* Mobile drawer */}
        <DrawerComponent mode="temporary">
          {/* Navigation content generated by the template */}
          {primaryItems.length > 0 && (
            <div className="mv-nav-drawer-section">
              <div className="mv-nav-drawer-section-title">Main</div>
              {primaryItems.map((item) => (
                <Item key={`primary-${item.id}`} item={item} />
              ))}
            </div>
          )}

          {secondaryItems.length > 0 && (
            <div className="mv-nav-drawer-section">
              <div className="mv-nav-drawer-section-title">Categories</div>
              {secondaryItems.map((item) => (
                <Item key={`secondary-${item.id}`} item={item} />
              ))}
            </div>
          )}
        </DrawerComponent>
      </div>

      {/* Mobile backdrop */}
      {isMobile && isDrawerOpen && (
        <div className="mv-nav-backdrop" onClick={closeDrawer} />
      )}
    </div>
  );
}
