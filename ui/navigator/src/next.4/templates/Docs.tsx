// file: src/next/navigator/templates/Docs.tsx
import React, { type ElementType } from "react";
import { useNavigator } from "../Navigator";
import { Actions, Brand, Drawer, Header, Item, Search } from "../components";
import type { TemplateProps } from "../types";
import "../navigator.css";
import "./styles/docs.css";

/**
 * Docs Template specific UI element tree/structure
 */
export interface DocsUiTree {
  header?: {
    element?: ElementType;
    brand?: ElementType;
    controls?: ElementType;
    actions?: ElementType;
  };
  drawer?: ElementType;
}

export function Docs({ components }: TemplateProps<DocsUiTree>) {
  const {
    isDrawerOpen,
    isMobile,
    closeDrawer,
    appTitle,
    logo,
    renderIcon,
    navigationTree,
    activeSection,
    getItemsByTags,
  } = useNavigator();

  // Get navigation items for the drawer - prefer items with "documentation" tag if available
  const docItems = getItemsByTags("documentation").length > 0
    ? getItemsByTags("documentation")
    : navigationTree[activeSection] || [];

  // Version switcher component
  const VersionSwitcher = () => {
    const [version, setVersion] = React.useState("v2.0");
    const [showDropdown, setShowDropdown] = React.useState(false);

    return (
      <div className="docs-version">
        <button
          className="docs-version-button"
          onClick={() => setShowDropdown(!showDropdown)}
        >
          {version} {renderIcon("ChevronDown", 16)}
        </button>

        {showDropdown && (
          <div className="docs-version-dropdown">
            {["v2.0", "v1.9", "v1.8"].map((v) => (
              <button
                key={v}
                className="docs-version-option"
                onClick={() => {
                  setVersion(v);
                  setShowDropdown(false);
                }}
              >
                {v}
              </button>
            ))}
          </div>
        )}
      </div>
    );
  };

  // Get components (custom or default)
  const HeaderComponent = components?.header?.element || Header;
  const BrandComponent = components?.header?.brand || Brand;
  const DrawerComponent = components?.drawer || Drawer;

  // Create the controls component
  const controlsComponent = components?.header?.controls || (
    <div className="docs-controls">
      <VersionSwitcher />
      <Search placeholder="Search documentation..." />
    </div>
  );

  // Create the actions component
  const actionsComponent = components?.header?.actions || (
    <Actions>
      <button className="mv-nav-action-button">
        {renderIcon("Github", 24)}
      </button>
      <button className="mv-nav-action-button">
        {renderIcon("Moon", 24)}
      </button>
    </Actions>
  );

  return (
    <div className="mv-docs-container">
      <HeaderComponent>
        <BrandComponent
          title={appTitle || "Documentation"}
          logo={logo || <div className="docs-logo">D</div>}
        />
        {controlsComponent}
        {actionsComponent}
      </HeaderComponent>

      <div className="mv-docs-layout">
        <DrawerComponent mode="persistent" className="mv-docs-sidebar">
          {/* Navigation content generated by the template */}
          {docItems.map((item) => <Item key={item.id} item={item} />)}
        </DrawerComponent>
      </div>

      {/* Mobile backdrop */}
      {isMobile && isDrawerOpen && (
        <div className="mv-nav-backdrop" onClick={closeDrawer} />
      )}
    </div>
  );
}
