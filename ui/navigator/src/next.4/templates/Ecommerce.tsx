// file: src/next/navigator/templates/Ecommerce.tsx
import { type ElementType, type ReactNode, useState } from "react";
import { useNavigator } from "../Navigator";
import {
  Actions,
  Brand,
  Drawer,
  Header,
  Item,
  MegaMenu,
  Search,
} from "../components";
import { type TemplateProps } from "../types";
import "../navigator.css";
import "./styles/ecommerce.css";

/**
 * Ecommerce Template specific UI element tree/structure
 */
export interface EcommerceUiTree {
  header?: {
    element?: ElementType;
    brand?: ElementType;
    search?: ElementType;
    actions?: ElementType;
  };
  navigation?: ReactNode;
  drawer?: ElementType;
}

export function Ecommerce({ components }: TemplateProps<EcommerceUiTree>) {
  const {
    navigationTree,
    activeSection,
    isDrawerOpen,
    isMobile,
    closeDrawer,
    appTitle,
    logo,
    renderIcon,
    getItemsByTags,
    isItemActive,
  } = useNavigator();

  // Get navigation items - for both mega menu and drawer
  const categoryItems = getItemsByTags("main-nav");
  const navItems = categoryItems.length > 0
    ? categoryItems
    : navigationTree[activeSection] || [];

  // Get components (custom or default)
  const HeaderComponent = components?.header?.element || Header;
  const BrandComponent = components?.header?.brand || Brand;
  // Fixed conditional to ensure it returns null, not false
  const DrawerComponent = isMobile ? (components?.drawer || Drawer) : null;
  const NavigationComponent = components?.navigation;

  // Custom components
  // Create logo component
  const StoreLogo = () => (
    <div className="store-logo">
      <span className="store-logo-primary">Shop</span>
      <span className="store-logo-secondary">Hub</span>
    </div>
  );

  // Custom component for mega menu triggers
  const MegaMenuNav = () => {
    const [hoveredItem, setHoveredItem] = useState<string | null>(null);

    return (
      <div className="store-nav-categories">
        {navItems.map((item) => (
          <div
            key={item.id}
            className={`store-mega-menu-trigger ${
              hoveredItem === item.id ? "hovered" : ""
            } ${isItemActive(item) ? "active" : ""}`}
            onMouseEnter={() => setHoveredItem(item.id)}
            onMouseLeave={() => setHoveredItem(null)}
          >
            <div className="store-mega-menu-trigger-content">
              <a href={item.path} className="store-mega-menu-trigger-link">
                {item.label}
              </a>
            </div>

            {hoveredItem === item.id && (
              <MegaMenu
                item={item}
                columns={3}
                featured={true}
                className="store-custom-mega-menu"
              />
            )}
          </div>
        ))}

        {/* Sale button - could be dynamically sourced from navigation data with a special tag */}
        {getItemsByTags("sale").length > 0
          ? (
            getItemsByTags("sale").map((item) => (
              <a
                key={item.id}
                href={item.path}
                className="store-category-sale"
              >
                {item.label}
              </a>
            ))
          )
          : <div className="store-category-sale">SALE</div>}
      </div>
    );
  };

  // Create the search component
  const searchComponent = components?.header?.search || (
    <Search placeholder="Search products..." />
  );

  // Create the actions component
  const actionsComponent = components?.header?.actions || (
    <Actions>
      <button className="mv-nav-action-button">
        {renderIcon("User", 24)}
      </button>
      <button className="mv-nav-action-button">
        {renderIcon("Heart", 24)}
      </button>
      <button className="store-cart-button">
        {renderIcon("ShoppingCart", 24)}
        <span className="store-cart-count">3</span>
      </button>
    </Actions>
  );

  // Navigation component - MegaMenu on desktop - fixed ternary to avoid false value
  const navigationElement = NavigationComponent ||
    (!isMobile ? <MegaMenuNav /> : null);

  return (
    <div className="mv-ecommerce-container">
      <HeaderComponent>
        <BrandComponent
          title={appTitle || "ShopHub"}
          logo={logo || <StoreLogo />}
        />
        {searchComponent}
        {actionsComponent}
      </HeaderComponent>

      {/* Custom navigation (e.g., mega menu) */}
      {navigationElement}

      <div className="mv-ecommerce-layout">
        {DrawerComponent && (
          <DrawerComponent mode="temporary">
            {/* Navigation content generated by the template */}
            {navItems.map((item) => <Item key={item.id} item={item} />)}
          </DrawerComponent>
        )}
      </div>

      {/* Mobile backdrop */}
      {isMobile && isDrawerOpen && (
        <div className="mv-nav-backdrop" onClick={closeDrawer} />
      )}
    </div>
  );
}
