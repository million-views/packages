---
import BaseLayout from "@layouts/Layout.astro";
import { NavigatorWithRouter } from "./_navigator.tsx";

const pathname = Astro.url.pathname;
const searchParams = Astro.url.searchParams;
const viewParam = searchParams.get('view');
const subviewParam = searchParams.get('subview');

// Ensure we have a clean path without trailing slashes for consistent matching
const cleanPath = pathname.endsWith('/') && pathname !== '/' 
  ? pathname.slice(0, -1) 
  : pathname;

// Determine if this is the dashboard page for default values
const isDashboard = pathname.includes('/dashboard');
const defaultView = isDashboard && !viewParam ? 'overview' : viewParam;
const defaultSubview = isDashboard && (defaultView === 'overview' || !defaultView) && !subviewParam 
  ? 'summary' 
  : subviewParam;
---

<BaseLayout>
  <div class="min-h-screen flex flex-col">
    <!-- Server-side render the navigator but hydrate it on the client -->
    <NavigatorWithRouter client:load />
    
    <!-- Hidden metadata to ensure state persists across page loads -->
    <script id="nav-state" type="application/json" set:html={JSON.stringify({
      pathname: cleanPath,
      view: defaultView,
      subview: defaultSubview
    })}>
    </script>
    
    <!-- Initialize navigation state from URL -->
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        try {
          // Get state from embedded JSON
          const stateElement = document.getElementById('nav-state');
          if (stateElement) {
            const state = JSON.parse(stateElement.textContent || '{}');
            console.log("Initializing navigation from _layout.astro with state:", state);
            
            // Delay slightly to ensure components are mounted
            setTimeout(() => {
              // Dispatch event to initialize navigation state
              window.dispatchEvent(new CustomEvent('initNavigationState', { 
                detail: state 
              }));
              
              // If on dashboard page, ensure default view and subview are set
              const isDashboard = window.location.pathname.includes('/dashboard');
              if (isDashboard) {
                // Update URL if needed
                const url = new URL(window.location.href);
                let needsUpdate = false;
                
                if (!url.searchParams.get('view') && state.view) {
                  url.searchParams.set('view', state.view);
                  needsUpdate = true;
                }
                
                if (!url.searchParams.get('subview') && state.subview) {
                  url.searchParams.set('subview', state.subview);
                  needsUpdate = true;
                }
                
                if (needsUpdate) {
                  window.history.replaceState({}, "", url.toString());
                }
              }
            }, 100);
          }
        } catch (error) {
          console.error('Error initializing navigation state:', error);
        }
      });

      // Debug navigation events
      window.addEventListener('viewChange', (e) => {
        console.log('View change event:', e.detail);
      });
      
      window.addEventListener('subViewChange', (e) => {
        console.log('SubView change event:', e.detail);
      });
      
      window.addEventListener('navigationStateChange', (e) => {
        console.log('Navigation state change:', e.detail);
      });
    </script>
    
    <!-- Page content from <slot /> -->
    <slot />
  </div>
</BaseLayout>